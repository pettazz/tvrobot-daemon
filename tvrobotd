#!/usr/bin/python
import os, sys
import signal, errno
import logging
import time
from lockfile import pidlockfile

import daemon

import core.config as config

from api.server import TVRobotAPI
from api.server import APIRunner

# working directory
if not os.path.exists(config.tvrobot['daemon']['working_directory']):
    os.mkdir(config.tvrobot['daemon']['working_directory'])

class TVRobotDaemon():

    def __init__(self):
        try:
            import setproctitle
            setproctitle.setproctitle('tvrobotd')
        except:
            pass 

        self.stdout_path = config.tvrobot['deamon']['log_path'] + 'tvrobotd.log'
        self.stderr_path = config.tvrobot['deamon']['log_path'] + 'tvrobotd.err.log'

        self.pidfile_path = '/var/run/tvrobotd.pid'

        if not len(sys.argv) == 2:
            self._err_msg('usage: tvrobotd start|stop|restart')
        action = unicode(sys.argv[1])
        if action not in [u'start', u'stop', u'restart']:
            self._err_msg('unrecognized action. actions are: start|stop|restart')

        if action == u'start':
            self._start()
        if action == u'stop':
            self._stop()
        if action == u'restart':
            self._restart()

    def _err_msg(self, message):
        sys.stderr.write(message + '\n')
        sys.stderr.flush()
        sys.exit(2)

    def _msg(self, message):
        sys.stdout.write(message + '\n')
        sys.stdout.flush()

    def _start(self):
        if self._check_pid():
            self._err_msg('tvrobotd is already running')
        else:
            self._msg('starting tvrobotd...')
            self._run_server()

    def _stop(self):
        if not self._check_pid():
            self._err_msg('tvrobotd is not running')
        else:
            existing_pid = pidlockfile.read_pid_from_pidfile(self.pidfile_path)
            try:
                os.kill(existing_pid, signal.SIGTERM)
                self._msg('tvrobotd stopped')
            except OSError, e:
                self._err_msg('unable to terminate tvrobotd, process %s: %s' % (existing_pid, e))

    def _restart(self):
        self._stop()
        time.sleep(1)
        self._start()

    def _check_pid(self, acquire_lock = False):
        if os.path.exists(self.pidfile_path):
            existing_pid = pidlockfile.read_pid_from_pidfile(self.pidfile_path)
            try:
                os.kill(existing_pid, signal.SIG_DFL)
                if acquire_lock:
                    self._err_msg('tvrobotd is already running, process %s' % existing_pid)
                else:
                    return True
            except OSError, e:
                if e.errno == errno.ESRCH:
                    if acquire_lock:
                        pidlockfile.remove_existing_pidfile(self.pidfile_path)
                        try:
                            self.pidfile = pidlockfile.PIDLockFile(self.pidfile_path).acquire(.1) #aint nobody got time for that
                            return True
                        except Exception, e:
                            self._err_msg('error creating pidfile lock: %s' % e)
                    else:
                        return False
                else:
                    if acquire_lock:
                        self._err_msg('tvrobotd may already be running: %s' % e)
                    else:
                        return True
        if acquire_lock:
            try:
                # https://github.com/smontanaro/pylockfile/issues/9
                # acquire(0) is broken in the current pypi version
                self.pidfile = pidlockfile.PIDLockFile(self.pidfile_path).acquire(.1) #aint nobody got time for that
                return True
            except Exception, e:
                self._err_msg('error creating pidfile lock: %s' % e)
        else:
            return False

    def _run_server(self):
        context = daemon.DaemonContext(
            stdout = open(self.stdout_path, 'a'), 
            stderr = open(self.stderr_path, 'a'),  
            working_directory = config.tvrobot['daemon']['working_directory'],
            signal_map = {
                signal.SIGTERM: 'end_server'
            }
        )
        context.end_server = self._stop_server

        with context:
            # create our pidfile lock, or die if we can't
            try:
                self._check_pid(acquire_lock = True)
            except Exception, e: 
                self._err_msg('error creating pidfile lock: %s' % e)

            self._msg('tvrobotd initialized, process %s' % os.getpid())
            APIRunner()

    def _stop_server(self, signal_number, stack_frame):
        # any cleanup at shutdown
        pidlockfile.remove_existing_pidfile(self.pidfile_path)
        raise SystemExit(u"Terminating on signal %s" % signal_number)


TVRobotDaemon()